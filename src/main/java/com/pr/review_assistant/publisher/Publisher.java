package com.pr.review_assistant.publisher;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.pr.review_assistant.database.ReviewJob;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Slf4j
@Component
public class Publisher {
    
    private final RestTemplate restTemplate = new RestTemplate();
    
    @Value("${github.token}")
    private String githubToken;
    
    @Value("${github.api.url}")
    private String githubApiUrl;
    
    public void postResult(ReviewJob job, List<String> findings) {
        log.info("Publishing results for PR #{} on {}", job.getPrNumber(), job.getRepo());
        
        try {
            // Create a summary comment with all findings
            String commentBody = formatFindings(findings);
            
            // Only post to GitHub if we have a real token (not test token)
            if (!"test-token".equals(githubToken)) {
                postCommentToPR(job, commentBody);
            } else {
                log.info("Test mode - would post comment: {}", commentBody);
            }
            
        } catch (Exception e) {
            log.error("Failed to publish results for PR #{} on {}: {}", 
                     job.getPrNumber(), job.getRepo(), e.getMessage(), e);
        }
    }
    
    private String formatFindings(List<String> findings) {
        if (findings.isEmpty()) {
            return "## üéâ Code Review Results\n\nNo issues found! Great job! ‚ú®";
        }
        
        StringBuilder comment = new StringBuilder();
        comment.append("## üîç Code Review Results\n\n");
        comment.append("Found ").append(findings.size()).append(" issue(s):\n\n");
        
        for (int i = 0; i < findings.size(); i++) {
            comment.append("### Issue ").append(i + 1).append("\n");
            comment.append("```\n");
            comment.append(findings.get(i));
            comment.append("\n```\n\n");
        }
        
        comment.append("---\n");
        comment.append("*Generated by PR Review Assistant* ü§ñ");
        
        return comment.toString();
    }
    
    private void postCommentToPR(ReviewJob job, String commentBody) {
        String url = String.format("%s/repos/%s/issues/%d/comments", 
                                 githubApiUrl, job.getRepo(), job.getPrNumber());
        
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setBearerAuth(githubToken);
        
        Map<String, String> requestBody = new HashMap<>();
        requestBody.put("body", commentBody);
        
        HttpEntity<Map<String, String>> request = new HttpEntity<>(requestBody, headers);
        
        try {
            ResponseEntity<String> response = restTemplate.postForEntity(url, request, String.class);
            
            if (response.getStatusCode().is2xxSuccessful()) {
                log.info("Successfully posted comment to PR #{} on {}", job.getPrNumber(), job.getRepo());
            } else {
                log.warn("Unexpected response when posting comment: {}", response.getStatusCode());
            }
            
        } catch (Exception e) {
            log.error("Failed to post comment to GitHub: {}", e.getMessage(), e);
            throw e;
        }
    }
}
